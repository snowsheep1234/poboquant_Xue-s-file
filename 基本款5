#!/usr/bin/env python
# coding:utf-8
from PoboAPI import *
from copy import *
import datetime
import time
import numpy as np
import math

#开始时间，用于初始化一些参数
def OnStart(context) :
    print "I\'m starting..."
    #设定一个全局变量品种
    g.code = "510050.SHSE"
    g.num = 1
    #订阅实时数据，用于驱动OnQuote事件
    SubscribeQuote(g.code)
    #订阅K线数据，用于驱动OnBar事件
    SubscribeBar(g.code, BarType.Min60)
    #登录交易账号，需在主页用户管理中设置账号，并把证券测试替换成您的账户名称
    context.myacc = None
    if context.accounts.has_key("方正测试") :
        print "登录交易账号[方正测试]"
        if context.accounts["方正测试"].Login() :
            context.myacc = context.accounts["方正测试"]    

def OnMarketQuotationInitialEx(context, exchange,daynight):
    if exchange == 'SHSE' and daynight == 'day':
        print '上交所行情开盘时重登交易账号'
        context.myacc.Logout()
        context.myacc.Login()            
        SubscribeBar(g.code, BarType.Min60)               
            
  
def TestSetFeeRate(context,code):
    if not context.myacc:
      return

    fee = PBObj();
    fee.OpenUnit = 0
    fee.OpenRate = 0.000

    fee.CloseUnit = 0
    fee.CloseRate = 0.000    

    fee.CloseTodayUnit = 0
    fee.CloseTodayRate = 0.000   

    fee.MiniFee = 0
    context.myacc.SetFee(code, fee) 
  
def stime(op):
    info1 = GetContractInfo(op)
    kill = info1['行权到期日']
    cutime = GetCurrentTime()
    c = cutime.date()
    n = (kill - c).days
    print n

def Getop(code):
    option = PBObj()    
    option.EndDate = GetCurrentTime()
    option.Count = 1
    klinedata = GetHisData(g.code, BarType.Min60, option)                         
    now1 = klinedata[-1].close #取得上一根K线的收盘价
    print str(now1)+"收盘价"
    cutime = GetCurrentTime()
    #获取行权价档位
    if now1 <= 3 :
        interval=0.05 
    elif now1 <= 5 :
        interval = 0.1
    elif now1 <= 10 :
        interval = 0.25
    elif now1 <= 20 :       
        interval = 0.5
    elif now1 <= 50 :          
        interval = 1       
    elif now1 <= 100 :
        interval = 2.5
    else :
        interval = 5       
    now50c = round(now1/interval)*interval+interval #平直或虚一档call
    now1 = round(now1/interval)*interval
    #获取对应行权价的合约
    atmopc_1 = GetAtmOptionContract(code,0,now50c,0)
    atmopc = GetAtmOptionContract(code,0,now1,0)
    #如果合约存在
    if atmopc :        
        info1 = GetContractInfo(atmopc)
        kill = info1['行权到期日']
        c = cutime.date()
        n = (kill - c).days        
        month_time=cutime
        if n<=5: #检查合约到期日是否大于5天，否则开仓下月
            atmopc_1 = GetAtmOptionContract(code,1,now50c,0)
            atmopc = GetAtmOptionContract(code,1,now1,0)    
    print str(atmopc)+"平值"
    print str(atmopc_1)+"虚值"
    return atmopc,atmopc_1            


#获取上根K线收盘价
def Getprice(code): 
    #a = GetQuote(code)
    #now1=a.now
    #time=a.time
    #if now1==0:
    option = PBObj()
    option.count=2
    klinedata = GetHisData(code, BarType.Min60, option) 
    now1 = klinedata[-1].open
    time=klinedata[-1].datetime
    print str(code)+ 'code '+str(now1) + '时间：' + str(time)        
    return now1    


#实时行情事件，当有新行情出现时调用该事件
#过滤掉不需要的行情通知
#def OnQuote(context, code) :
def OnBar(context,code,bartype) :  
    if code != g.code :
        return    
    cutime = GetCurrentTime()    
    macd = GetIndicator('MACD',g.code,bar_type= BarType.Min60)
    macd=macd["MACD"]    
    opc,opc_1 = Getop(g.code)  
    posi = context.myacc.GetPositions()         
    if macd[-3]>0 and macd[-2]<0:
        print "开仓合约"
        print opc
        print opc_1
        TestSetFeeRate(context,opc)
        TestSetFeeRate(context,opc_1)
        TestSmartOrder_buyopen(context, opc)
        TestSmartOrder_sellopen(context, opc_1)
    if posi:
        print len(posi)
        opcode1 = posi[0].contract
        volu1 = posi[0].volume
        info1 = GetContractInfo(opcode1)
        pr1 = info1['行权价格']
        ki1 = info1['行权到期日']
        info1 = GetContractInfo(opcode1)
        kill = info1['行权到期日']
        cutime = GetCurrentTime()
        c = cutime.date()
        sy = (kill - c).days     
        if len(posi) == 1 :
            if volu1==1:
                TestSetFeeRate(context,opcode1)
                TestSmartOrder_sellclose(context, opcode1)
            else :
                TestSetFeeRate(context,opcode1)
                TestSmartOrder_buyclose(context, opcode1)   
        elif sy ==0 or (macd[-3]<0 and macd[-2]>0) :#平仓出场
            if volu1==1:
                TestSetFeeRate(context,opcode1)
                TestSmartOrder_sellclose(context, opcode1)
                if len(posi) == 2:                 
                    opcode2 = posi[1].contract
                    TestSetFeeRate(context,opcode2)
                    TestSmartOrder_buyclose(context, opcode2)
            else:
                TestSetFeeRate(context,opcode1)
                TestSmartOrder_buyclose(context, opcode1)
                if len(posi) == 2:
                    opcode2 = posi[1].contract
                    TestSetFeeRate(context,opcode2)
                    TestSmartOrder_sellclose(context, opcode2)

#委托回报事件，当有委托回报时调用
def OnOrderChange(context, AccountName, order) :
    #print "OrderChanged on " + order.id + " on " + AccountName
    #orderinfo=context.accounts["回测期货"].GetOrder(order.id)
    print "-----------OnOrderChange查询-----------"
    print "委托合约 "+str(order.contract)
    print "委托数量 "+str(order.volume)
    print "委托是否可撤 "+str(order.IsCanCancel())
    print "委托买卖方向"+str(order.bstype.BuySellFlag)
    print "委托编号 orderID "+str(order.id)
    print "委托状态 "+str(order.status)
    print "状态解释：0代表初始状态,4代表正在申报,5代表委托单已申报,32代表已完成(终止状态,部成部撤或全部成交),33：下单出错终止"   
def OnTradeDeal(context, AccountName, trade) :
    #TR = context.accounts["回测期货"].GetTradeDetail(trade.id, trade.bstype.BuySellFlag)
    print "------------OnTradeDeal查询------------"
    print "成交合约："+str(trade.contract)
    print '成交价格:' + str(trade.price)
    print "成交数量:"+str(trade.volume)
    print "委托编号："+str(trade.orderid)
    print "成交编号 ："+str(trade.id)
      
def TestSmartOrder_buyopen(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.BuyOpen
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= 16     #
    aPriceType.LimitPriceOffset = 20    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = 1
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量
        #追单参数
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 2    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000     #超时撤单时间(单位：ms)，=0时，不追单
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1) 
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID
 
def TestSmartOrder_sellopen(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.SellOpen
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= 16     #
    aPriceType.LimitPriceOffset = 20    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = 2
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量    
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 20    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000        #超时撤单时间(单位：ms)，=0时，不追单
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1)
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID

def TestSmartOrder_sellclose(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.SellClose
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= 16    #买一价
    aPriceType.LimitPriceOffset = 20    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = 1
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量 
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 2    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000       #超时撤单时间(单位：ms)，=0时，不追单                                         
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1) 
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID
        
        
def TestSmartOrder_buyclose(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.BuyClose
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= 16    #买一价
    aPriceType.LimitPriceOffset = 20    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = 2
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 2    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000        #超时撤单时间(单位：ms)，=0时，不追单                                         
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1) 
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID
      
    
def OnSmartOrderChange(context, AccountName, status):#监听智能单状态
    print "=================OnSmartOrderChange================="
    print("========智能单回报推送 账号名称:" + AccountName  )
    DumpSmartOrderStatus(status)


def DumpSmartOrderStatus(status):
    print "开始检查智能单状态"
    if not status:
        print("智能单状态对象为空。")
        return
    print("====智能单状态---------------------:")
    print("UID:"+str(status.UID)\
    + " 委托类型:"+str(status.OrderType)\
    + " 状态字:"+str(status.State)\
    + " 出错码:"+str(status.ErrorCode)\
    + " 出错信息:"+str(status.ErrorInfo)\
    + " 委托总数:"+str(status.VolumeTotal)\
    + " 已成交数:"+str(status.VolumeTraded)\
    + " 未拆数量"+str(status.VolumeRemain)\
    + " 追价总次数:"+str(status.ReorderTotal)\
    + " 已下单次数:"+str(status.OrderNbr)) 
    


