#!/usr/bin/env python
# coding:utf-8
from PoboAPI import *
import datetime
import time
import numpy as np
import math
from copy import *


#开始时间，用于初始化一些参数
def OnStart(context) :
    print "I\'m starting..."
    #参数赋值
    target = context.param["target"]
    pr_type = context.param["pr_type"]
    g.LPO = context.param["LPO"]
    g.num = context.param["num"]  
    #参数赋值
    if pr_type=="2":
        g.tp=2
    elif pr_type=="16":
        g.tp=16    
    
    if target=="1":
        g.code = "510050.SHSE"
    elif target=="2":
        g.code = "510300.SHSE"        
    elif target=="3":
        g.code = "159919.SZSE"
      
    g.opcode = None
    g.marketpos = 0
    
    #订阅实时数据，用于驱动OnQuote事件
    SubscribeQuote(g.code)
    #订阅K线数据，用于驱动OnBar事件
    period=context.param["period"]
    if period=="1":
        SubscribeBar(g.code, BarType.Year)
    elif period=="2":
        SubscribeBar(g.code, BarType.Season)
    elif period=="3":
        SubscribeBar(g.code, BarType.Month)
    elif period=="4":
        SubscribeBar(g.code, BarType.Week)
    elif period=="5":
        SubscribeBar(g.code, BarType.Day)
    elif period=="6":
        SubscribeBar(g.code, BarType.Min240)
    elif period=="7":
        SubscribeBar(g.code, BarType.Min120)
    elif period=="8":
        SubscribeBar(g.code, BarType.Min60)
    elif period=="9":
        SubscribeBar(g.code, BarType.Min30)
    elif period=="10":
        SubscribeBar(g.code, BarType.Min15)
    elif period=="11":
        SubscribeBar(g.code, BarType.Min5)
    elif period=="12":
        SubscribeBar(g.code, BarType.Min3)
    elif period=="13":
        SubscribeBar(g.code, BarType.Min)        
        
    #登录交易账号，需在主页用户管理中设置账号，并把证券测试替换成您的账户名称
    context.myacc = None
    account_name = context.param['account_name']
    context.myacc = account_name    
    if account_name in context.accounts :
        print("登录交易账号[%s]"%account_name)
        context.myacc = context.accounts[account_name]
        if context.accounts[account_name].Login() :
            print("登录成功")
            df= GetPositionsAsDF(context.myacc)
            print("该账号当前持仓为")
            print(df)            
    #9:15 12:45 自动登录交易账号
            context.myacc .SetAutoRelogin(datetime.time(9,15))      
            context.myacc .SetAutoRelogin(datetime.time(12,45))                          
        else:
            print("登录失败")
            context.myacc .SetAutoRelogin(datetime.time(9,15))      
            context.myacc .SetAutoRelogin(datetime.time(12,45))              
        SetTimer(120)
    else:
        print("此账号不存在，请检查该账号配置")    
         

def OnMarketQuotationInitialEx(context, exchange,daynight):
    if exchange == 'SHSE' and daynight == 'day':
        print '上交所行情开盘时重登交易账号'
        context.myacc.Logout()
        context.myacc.Login()   
        period=context.param["period"]
        if period=="1":
            SubscribeBar(g.code, BarType.Year)
        elif period=="2":
            SubscribeBar(g.code, BarType.Season)
        elif period=="3":
            SubscribeBar(g.code, BarType.Month)
        elif period=="4":
            SubscribeBar(g.code, BarType.Week)
        elif period=="5":
            SubscribeBar(g.code, BarType.Day)
        elif period=="6":
            SubscribeBar(g.code, BarType.Min240)
        elif period=="7":
            SubscribeBar(g.code, BarType.Min120)
        elif period=="8":
            SubscribeBar(g.code, BarType.Min60)
        elif period=="9":
            SubscribeBar(g.code, BarType.Min30)
        elif period=="10":
            SubscribeBar(g.code, BarType.Min15)
        elif period=="11":
            SubscribeBar(g.code, BarType.Min5)
        elif period=="12":
            SubscribeBar(g.code, BarType.Min3)
        elif period=="13":
            SubscribeBar(g.code, BarType.Min)   
          

                   
  #设定选取平直或虚一档的函数    
def Getop(code,period):
    option = PBObj()    
    option.EndDate = GetCurrentTime()
    option.Count = 1
    
    if period=="1":
        klinedata = GetHisData(g.code, BarType.Year, option)
    elif period=="2":
        klinedata = GetHisData(g.code, BarType.Season, option)
    elif period=="3":
        klinedata = GetHisData(g.code, BarType.Month, option)
    elif period=="4":
        klinedata = GetHisData(g.code, BarType.Week, option)        
    elif period=="5":
        klinedata = GetHisData(g.code, BarType.Day, option)        
    elif period=="6":
        klinedata = GetHisData(g.code, BarType.Min240, option)        
    elif period=="7":
        klinedata = GetHisData(g.code, BarType.Min120, option)        
    elif period=="8":
        klinedata = GetHisData(g.code, BarType.Min60, option)        
    elif period=="9":
        klinedata = GetHisData(g.code, BarType.Min30, option)        
    elif period=="10":
        klinedata = GetHisData(g.code, BarType.Min15, option)        
    elif period=="11":
        klinedata = GetHisData(g.code, BarType.Min5, option)        
    elif period=="12":
        klinedata = GetHisData(g.code, BarType.Min3, option)        
    elif period=="13":
        klinedata = GetHisData(g.code, BarType.Min, option)            
        
    now1 = klinedata[-1].close #取得上一根K线的收盘价
    cutime = GetCurrentTime()
    #获取行权价档位
    if now1 <= 3 :
        interval=0.05 
    elif now1 <= 5 :
        interval = 0.1
    elif now1 <= 10 :
        interval = 0.25
    elif now1 <= 20 :       
        interval = 0.5
    elif now1 <= 50 :          
        interval = 1       
    elif now1 <= 100 :
        interval = 2.5
    else :
        interval = 5       
    now50p = math.floor(now1/interval)*interval #平直或虚一档put
    now50c = math.ceil(now1/interval)*interval #平直或虚一档call
    #获取对应行权价的合约
    atmopc = GetAtmOptionContract(code,0,now50c,0)
    atmopp = GetAtmOptionContract(code,0,now50p,1)
 
    #如果合约存在
    if atmopc :        
        info1 = GetContractInfo(atmopc)
        kill = info1['行权到期日']
        c = cutime.date()
        n = (kill - c).days        
        month_time=cutime
        if n<=5: #检查合约到期日是否大于5天，否则开仓下月
            atmopc = GetAtmOptionContract(code,1,now50c,0)
            atmopp = GetAtmOptionContract(code,1,now50p,1)    
    return atmopc,atmopp

def Getprice(code):
    option = PBObj()
    option.EndDate = GetCurrentTime()
    klinedata = GetHisData(code, BarType.Min, option)  
    now1 = klinedata[-1].close
    time=klinedata[-1].datetime
    print str(now1) + '时间：' + str(time)        
    return now1               
    
#实时行情事件，当有新行情出现时调用该事件
#过滤掉不需要的行情通知
#def OnQuote(context, code) :
def OnBar(context,code,bartype) :    
    if code != g.code :
        return            
    
    cutime = GetCurrentTime()     
    option = PBObj()    
    option.Count = 251

    period=context.param["period"]
    if period=="1":
        klinedata = GetHisData(g.code, BarType.Year, option)
    elif period=="2":
        klinedata = GetHisData(g.code, BarType.Season, option)
    elif period=="3":
        klinedata = GetHisData(g.code, BarType.Month, option)
    elif period=="4":
        klinedata = GetHisData(g.code, BarType.Week, option)        
    elif period=="5":
        klinedata = GetHisData(g.code, BarType.Day, option)        
    elif period=="6":
        klinedata = GetHisData(g.code, BarType.Min240, option)        
    elif period=="7":
        klinedata = GetHisData(g.code, BarType.Min120, option)        
    elif period=="8":
        klinedata = GetHisData(g.code, BarType.Min60, option)        
    elif period=="9":
        klinedata = GetHisData(g.code, BarType.Min30, option)        
    elif period=="10":
        klinedata = GetHisData(g.code, BarType.Min15, option)        
    elif period=="11":
        klinedata = GetHisData(g.code, BarType.Min5, option)        
    elif period=="12":
        klinedata = GetHisData(g.code, BarType.Min3, option)        
    elif period=="13":
        klinedata = GetHisData(g.code, BarType.Min, option)        

    last = klinedata[-3].close
    now1 = klinedata[-2].close
    option = PBObj()
    #计算MA60

    i=0
    klist = []
    while i<len(klinedata)-1:
        klist.append(klinedata[i].close)
        i+=1
    if len(klist)>0:
        ma3 = CreateCalcObj()
        X = np.array(klist, dtype=np.double)
        ma=context.param["ma"]
        Y = ma3.MA(X, ma, -2)      
     
    if last<Y[-2] and now1 > Y[-1]: #K线上穿均线
        print("上穿均线")
        if g.marketpos==1 : #平仓仓位
            TestSmartOrder_buyclose(context, g.opcode)
        opc,opp = Getop(g.code,period)                 
        if opp :
            g.newcode=opp
            TestSmartOrder_sellopen(context, opp)            
            print("上穿")    
        else:
            print("换仓不成功，找不到平值合约")
            
    elif last>Y[-2] and now1 < Y[-1] : #K线下穿均线
        if g.marketpos==1 : #平仓仓位
            TestSmartOrder_buyclose(context, g.opcode)            
        opc,opp = Getop(g.code,period)   
        if opc :
            g.newcode=opc
            TestSmartOrder_sellopen(context, opc)                       
            print("下穿")
        else:
            print "换仓不成功，找不到平值合约"
    
#权利金<0.0020 换仓下月
    if g.marketpos==1:
        info1 = GetContractInfo(g.opcode)
        strike=info1['行权价格']
        op_type=info1['期权种类'] 
        now1=Getprice(g.opcode)   
        prem=context.param["prem"]
        if now1 <= prem :       
            TestSmartOrder_buyclose(context, g.opcode)                        
            atm = GetAtmOptionContract(g.code,1,strike,op_type) 
            g.newcode=atm
            TestSmartOrder_sellopen(context, atm)                                   
          
            
def OnTradeDeal(context, AccountName, trade) :
    #0--开仓
    print("----------OnTradeDeal查询------------")
    print("成交合约："+str(trade.contract)) 
    print("成交数量:" + str(trade.volume)) 
    print("委托编号："+str(trade.orderid)) 
    print("成交编号 ："+str(trade.id))  
    account_name = context.param['account_name']
    TR = context.accounts[account_name].GetTradeDetail(trade.id, trade.bstype.BuySellFlag)    
    #判断成交，改变状态变量
    if TR.contract==g.opcode and TR.volume==1 and TR.bstype.OffsetFlag=="1":            
        print ("已平仓" ) 
        g.marketpos=0        
    else:
        print ("未平仓" ) 
        
    if TR.contract==g.newcode and TR.volume==1 and TR.bstype.OffsetFlag=="0":        
        g.opcode=g.newcode
        g.marketpos=1
        
        print ("新开仓")
    else:
        print ("未开仓" )     
    
    
    
def TestSmartOrder_buyopen(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.BuyOpen
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= g.tp     #
    aPriceType.LimitPriceOffset = g.LPO    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = g.num
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量
        #追单参数
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 2    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000     #超时撤单时间(单位：ms)，=0时，不追单
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1) 
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID
def TestSmartOrder_sellopen(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.SellOpen
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= g.tp     #
    aPriceType.LimitPriceOffset = g.LPO    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = g.num
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量    
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 20    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000        #超时撤单时间(单位：ms)，=0时，不追单
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1)
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID
def TestSmartOrder_sellclose(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.SellClose
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= g.tp    #买一价
    aPriceType.LimitPriceOffset = g.LPO    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = g.num
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量 
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 2    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000       #超时撤单时间(单位：ms)，=0时，不追单                                         
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1) 
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID        
def TestSmartOrder_buyclose(context, code) :
    OrderParam1 = OrderParam()    #生成一个OrderParam对象
    OrderParam1.Code = code
    OrderParam1.BSType = BSType.BuyClose
    aPriceType = deepcopy(PbPriceType.Limit)    #限价,别忘记from copy import *
    aPriceType.LimitPriceType= g.tp    #买一价
    aPriceType.LimitPriceOffset = g.LPO    #限价超价；不需要超价时,可不写
    OrderParam1.PyPriceType = aPriceType
    OrderParam1.Volume    = g.num
    SplitOrderParam1 = SplitOrderParam()    #生成一个SplitOrderParam对象
    SplitOrderParam1. Mode = 2  #拆单方式: 0-不拆单 1-固定拆单.2-随机拆单 
    SplitOrderParam1. TimeSpan = 1    #下单的间隔时间(毫秒)    
        #随机拆单
    SplitOrderParam1. RandomSplit.Threshold = 10     #阈值: 大于5手
    SplitOrderParam1. RandomSplit.LowerLimit = 3    #每次委托下限数量
    SplitOrderParam1. RandomSplit.UpperLimit = 6    #每次委托上限数量
    #ReorderParam1 = ReorderParam()
    #ReorderParam1 .PriceType = '2'  #价格类型: 限价(默认)
    #ReorderParam1 .LimitPriceType= 16  #限价类型:对手价
    #ReorderParam1 .LimitPriceOffset = 2    #限价超价
    #ReorderParam1 .RepeatTotal = 1000        #追价总次数
    #ReorderParam1 .MaxaPriceOffset = 1000 #追价与首次下单价之差的最大价位
    #ReorderParam1 .TimeOut = 10000000        #超时撤单时间(单位：ms)，=0时，不追单                                         
    ret = context.myacc.InsertSmartOrder(OrderParam1,SplitOrderParam1) 
    if ret and ret.UID:
        g.UID1 = ret.UID    #成功,记录智能单ID
'''    
    #智能单监控    
def OnSmartOrderChange(context, AccountName, status):#监听智能单状态
    print "=================OnSmartOrderChange================="
    print("========智能单回报推送 账号名称:" + AccountName  )
    DumpSmartOrderStatus(status)
def DumpSmartOrderStatus(status):
    print "开始检查智能单状态"
    if not status:
        print("智能单状态对象为空。")
        return
    print("====智能单状态---------------------:")
    print("UID:"+str(status.UID)\
    + " 委托类型:"+str(status.OrderType)\
    + " 状态字:"+str(status.State)\
    + " 出错码:"+str(status.ErrorCode)\
    + " 出错信息:"+str(status.ErrorInfo)\
    + " 委托总数:"+str(status.VolumeTotal)\
    + " 已成交数:"+str(status.VolumeTraded)\
    + " 未拆数量"+str(status.VolumeRemain)\
    + " 追价总次数:"+str(status.ReorderTotal)\
    + " 已下单次数:"+str(status.OrderNbr)) 
'''     
    
    
    
